'.source.js':
  'Factory':
    'prefix': '_fm'
    'body': """
      (function() {

        'use strict';

        var app = angular.module('nova'),
            factoryId = '${1:name}ModelFactory';

        app.factory(factoryId, ['config', 'Restangular', '$q', factory]);

        function factory(config, restangular, $q) {

          var defaultValues = {};

          function ${2:entity}(parameter) {
            return this._initialize(parameter);
          };

          ${2:entity}.prototype = {

            ///////////////////////////////////////////////
            // Public Members                            //
            ///////////////////////////////////////////////

            /**
            * Save ${2:name} changes
            *
            * @method save
            **/
            save: function() {
              if (this.id) {
                return this._update${2:entity}();
              } else {
                return this._create${2:entity}();
              }
            },
            /**
            * Remove ${2:name}
            *
            * @method remove
            **/
            remove: function() {
              return this._remove${2:entity}();
            },

            ///////////////////////////////////////////////
            // Private Members                           //
            ///////////////////////////////////////////////

            /**
            * Defines base end point for the server calls
            *
            * @private
            * @property
            **/
            _baseEndpoint: config.endpoints.inventory,
            /**
            * Initialize entity
            *
            * @private
            * @method _initialize
            * @param {parameter} this can be in three different forms: id, object or no parameters (undefined)
            **/
            _initialize: function(parameter) {
              var d = $q.defer(),
                  id = +parameter;

              // If the user pass an integer as parameter then get the ${1:name} from the server
              if (id) {
                this.id = id;
                this._get${2:entity}ById(this.id).then(function(${1:name}) {
                  this.details = ${1:name};
                  d.resolve(this);
                });
              // if the user pass an object then make get its data and wrap it into the details property
              } else if (_.isObject(parameter)) {
                this.details = parameter;
                // we need to move the id outside the details
                this.id = parameter.id;
                delete parameter.id;
                d.resolve(this);
              // if it is undefined then create a new object
              } else if (!parameter) {
                // initialize default values for a new ${1:name}
                this.details = _.cloneDeep(defaultValues);
                d.resolve(this);
              }

              return d.promise;
            },
            /**
            * Returns a ${2:entity} object from a raw data object received from the server
            *
            * @private
            * @method _getFromRawData
            * @param {rawData} ${1:name}'s raw data
            **/
            _getFromRawData: function(rawData) {
              if (!_.isObject(rawData))
                throw("In order to get a ${2:entity} from raw data you need to supply the raw data as an object");
              return new ${2:entity}(rawData);
            },

            ///////////////////////////////////////////////
            // Server Calls                              //
            ///////////////////////////////////////////////

            /**
            * Retrieve a ${1:name} from the server using its id
            *
            * @private
            * @method _get${2:entity}ById
            **/
            _get${2:entity}ById: function(id) {
              return restangular.setBaseUrl(this._baseEndpoint)
                  .one('${1:name}s', id)
                  .get();
            },
            /**
            * Create new ${2:entity}
            *
            * @private
            * @method _create${2:entity}
            **/
            _create${2:entity}: function() {
              return restangular.setBaseUrl(this._baseEndpoint)
                  .all('${1:name}s')
                  .post(this.details);
            },
            /**
            * Update an existent ${1:name}
            *
            * @private
            * @method _update${2:entity}
            **/
            _update${2:entity}: function() {
              return restangular.setBaseUrl(this._baseEndpoint)
                      .one('${1:name}s', this.id)
                      .customPUT(this.details);
            },
            /**
            * Remove ${1:name}
            *
            * @private
            * @method _remove${2:entity}
            **/
            _remove${2:entity}: function() {
              return restangular.setBaseUrl(this._baseEndpoint)
                      .one('${1:name}s', this.id)
                      .remove();
            },

          }

          return {
            ${2:entity} : ${2:entity}
          }
        }
      })();
      """
